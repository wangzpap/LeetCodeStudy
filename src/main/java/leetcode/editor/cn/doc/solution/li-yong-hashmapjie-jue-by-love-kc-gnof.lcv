> Problem: [6417. 频率跟踪器](https://leetcode.cn/problems/frequency-tracker/description/)

[TOC]

# 思路

> 这个题目可以利用两个HashMap，第一个HashMap记录的是每个数字出现的频率，第二个是记录出现每个频率的数字的个数。

# 解题方法

- 当我们每次加入新的元素的时候，判断是否以前是否已经存在该元素，若存在首先更新的是第一个HashMap的数字的频率，其次我们必须将第二个HashMap以前该频率数字的个数减少一，并且新频率的数字的个数加1。
- 当我们每次删除元素的时候，先判断元素是否存在，若存在，则将该元素的频率减1，并且将第二个map该频率的数字的个数减1，并且修改第二个map该频率减少1后的数字的个数加1
- 针对判断频率的数字的个数是否存在时候，我们直接判断第二个HashMap即可。

# Code

* []

```Java

class FrequencyTracker {
    Map<Integer,Integer>map=new HashMap<>();//记录每个数字出现的频率
    Map<Integer,Integer>map1=new HashMap<>();//记录出现这个频率的数字有多少个
    public FrequencyTracker() {

    }

    public void add(int number) {
        int old=0,num=0;
        if(map.containsKey(number)){
            old=map.get(number);//获取旧的频率
            map.put(number,old+1);//更新这个数字的频率
            map1.put(old+1,map1.getOrDefault(old+1,0)+1);
            map1.put(old,map1.get(old)-1);//频率减少1
            if(map1.get(old)==0)map1.remove(old);
        }else{
            map.put(number,1);
            map1.put(1,map1.getOrDefault(1,0)+1);
        }

    }

    public void deleteOne(int number) {
        if(map.containsKey(number)) {
            int num = map.get(number);//获取频率
            if((num-1)==0)map.remove(number);//频率为0删除
            else map.put(number,num-1);
            if((map1.get(num)-1)==0)map1.remove(num);
            else map1.put(num,map1.get(num)-1);
            if((num-1)>0)map1.put(num-1,map1.getOrDefault(num-1,0)+1);//如果删除一个以后还存在频率，则换到下一个频率的位置
        }
    }

    public boolean hasFrequency(int frequency) {
        if(map1.get(frequency)!=null&&map1.get(frequency)>0)return true;
        return false;
    }
}

/**
 * Your FrequencyTracker object will be instantiated and called as such:
 * FrequencyTracker obj = new FrequencyTracker();
 * obj.add(number);
 * obj.deleteOne(number);
 * boolean param_3 = obj.hasFrequency(frequency);
 */

```

